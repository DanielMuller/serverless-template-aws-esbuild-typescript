# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ${self:custom.stage.org}
service: ${self:custom.stage.service}
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
configValidationMode: error
frameworkVersion: '4'

build:
  esbuild:
    bundle: true
    minify: false
    buildConcurrency: 3
    sourcemap:
      type: linked
      setNodeOptions: true
custom:
  stage: ${file(config/stages/${self:provider.stage}.yml)}
  # Add custom variables here. You can re-use variables defined in the stage yml
  # customStageVar: ${self:custom.stage.customStageVar}

plugins:
  - serverless-deployment-bucket
package:
  individually: true

provider:
  name: aws
  runtime: nodejs22.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, self:custom.stage.region}
  profile: ${self:custom.stage.profile}
  memorySize: ${self:custom.stage.lambda.memorySize, '128'}
  timeout: ${self:custom.stage.lambda.timeout, '10'}
  logRetentionInDays: ${self:custom.stage.lambda.logRetention, 1}
  iam: ${file(serverless.iam.yml)}
  logs:
    lambda:
      logFormat: JSON
      applicationLogLevel: DEBUG
      systemLogLevel: WARN

  deploymentBucket:
    name: com.serverless.${aws:accountId}.${aws:region}.deploys
    blockPublicAccess: true
    skipPolicySetup: true
    serverSideEncryption: AES256
  environment:
    SERVERLESS_REGION: ${aws:region}
    POWERTOOLS_SERVICE_NAME: ${self:service}
    POWERTOOLS_LOG_LEVEL: DEBUG
    POWERTOOLS_LOGGER_LOG_EVENT: 'true'
functions: ${file(helpers/main.js):getFunctions}
resources:
  Resources: ${file(helpers/main.js):getResources}
#  Outputs: ${file(helpers/main.js):getOutputs}
